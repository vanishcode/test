(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[6118,4799],{4794:(t,e,n)=>{"use strict";n.d(e,{d:()=>o});var i=n(5279);class o extends i.J5{async init(t){this.chainConfig||(this.chainConfig=(0,i.h2)(i.EN.EIP155,1))}async authenticateUser(){if(!this.provider||this.status!==i.MP.CONNECTED)throw i.RM.notConnectedError();const{chainNamespace:t,chainId:e}=this.chainConfig,n=await this.provider.request({method:"eth_accounts"});if(n&&n.length>0){const o=(0,i.Cb)(n[0],this.name);if(o&&!(0,i.$E)(o))return{idToken:o};const a={domain:window.location.origin,uri:window.location.href,address:n[0],chainId:parseInt(e,16),version:"1",nonce:Math.random().toString(36).slice(2),issuedAt:(new Date).toISOString()},s=await(0,i.tV)(a,t),r=await this.provider.request({method:"personal_sign",params:[s,n[0]]}),c=await(0,i.rn)(t,r,s,this.name,this.sessionTime,this.clientId,this.web3AuthNetwork);return(0,i.Fr)(n[0],this.name,c),{idToken:c}}throw i.RM.notConnectedError("Not connected with wallet, Please login/connect first")}async disconnectSession(){super.checkDisconnectionRequirements();const t=await this.provider.request({method:"eth_accounts"});t&&t.length>0&&(0,i.qz)(t[0],this.name)}async disconnect(){this.rehydrated=!1,this.emit(i.n2.DISCONNECTED)}}},27630:(t,e,n)=>{"use strict";n.r(e),n.d(e,{WalletConnectV1Adapter:()=>d});var i=n(56666),o=n(71709),a=n(5279),s=n(4794),r=n(82271);const c=[{name:"Rainbow",chains:[a.EN.EIP155],logo:"https://images.web3auth.io/login-rainbow.svg",mobile:{native:"rainbow:",universal:"https://rnbwapp.com"},desktop:{native:"",universal:""}},{name:"MetaMask",chains:[a.EN.EIP155],logo:"https://images.web3auth.io/login-metamask.svg",mobile:{native:"metamask:",universal:"https://metamask.app.link"},desktop:{native:"",universal:""}}];function h(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}class d extends s.d{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(t),(0,i.Z)(this,"name",a.rW.WALLET_CONNECT_V1),(0,i.Z)(this,"adapterNamespace",a.yk.EIP155),(0,i.Z)(this,"currentChainNamespace",a.EN.EIP155),(0,i.Z)(this,"type",a.hN.EXTERNAL),(0,i.Z)(this,"adapterOptions",void 0),(0,i.Z)(this,"status",a.MP.NOT_READY),(0,i.Z)(this,"adapterData",{uri:"",extensionAdapters:c}),(0,i.Z)(this,"connector",null),(0,i.Z)(this,"wcProvider",null),this.adapterOptions=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?h(Object(n),!0).forEach((function(e){(0,i.Z)(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},t)}get connected(){var t;return!(null===(t=this.connector)||void 0===t||!t.connected)}get provider(){var t;return(null===(t=this.wcProvider)||void 0===t?void 0:t.provider)||null}set provider(t){throw new Error("Not implemented")}async init(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(await super.init(),super.checkInitializationRequirements(),this.connector=this.getWalletConnectInstance(),this.wcProvider=new r.WalletConnectProvider({config:{chainConfig:this.chainConfig},connector:this.connector}),this.emit(a.n2.READY,a.rW.WALLET_CONNECT_V1),this.status=a.MP.READY,a.cM.debug("initializing wallet connect v1 adapter"),t.autoConnect)if(this.connected)try{this.rehydrated=!0,await this.onConnectHandler({accounts:this.connector.accounts,chainId:this.connector.chainId})}catch(t){a.cM.error("wallet auto connect",t),this.emit(a.n2.ERRORED,t)}else this.status=a.MP.NOT_READY,this.emit(a.n2.CACHE_CLEAR)}async connect(){if(super.checkConnectionRequirements(),!this.connector)throw a.Ty.notReady("Wallet adapter is not ready yet");if(this.connected)return await this.onConnectHandler({accounts:this.connector.accounts,chainId:this.connector.chainId}),this.provider;var t,e;this.status!==a.MP.CONNECTING&&(null!==(t=this.adapterOptions.adapterSettings)&&void 0!==t&&t.qrcodeModal&&(this.connector=this.getWalletConnectInstance(),this.wcProvider=new r.WalletConnectProvider({config:{chainConfig:this.chainConfig,skipLookupNetwork:null===(e=this.adapterOptions.adapterSettings)||void 0===e?void 0:e.skipNetworkSwitching},connector:this.connector})),await this.createNewSession(),this.status=a.MP.CONNECTING,this.emit(a.n2.CONNECTING,{adapter:a.rW.WALLET_CONNECT_V1}));return new Promise(((t,e)=>{if(this.connector){this.connector.on("modal_closed",(async()=>(this.status=a.MP.READY,this.emit(a.n2.READY,a.rW.WALLET_CONNECT_V1),e(new Error("User closed modal")))));try{this.connector.on("connect",(async(e,n)=>(e&&this.emit(a.n2.ERRORED,e),a.cM.debug("connected event emitted by web3auth"),await this.onConnectHandler(n.params[0]),t(this.provider))))}catch(t){a.cM.error("Wallet connect v1 adapter error while connecting",t),this.status=a.MP.READY,this.rehydrated=!0,this.emit(a.n2.ERRORED,t),e(t instanceof a.up?t:a.RM.connectionError(`Failed to login with wallet connect: ${(null==t?void 0:t.message)||""}`))}}else e(a.Ty.notReady("Wallet adapter is not ready yet"))}))}async getUserInfo(){if(!this.connected)throw a.RM.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async disconnect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};await super.disconnectSession();const{cleanup:e}=t;if(!this.connector||!this.connected)throw a.RM.notConnectedError("Not connected with wallet");await this.connector.killSession(),this.rehydrated=!1,e?(this.connector=null,this.status=a.MP.NOT_READY,this.wcProvider=null):this.status=a.MP.READY,await super.disconnect()}async addChain(t){var e,n;let i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkAddChainRequirements(i);const o=null===(e=this.adapterOptions.adapterSettings)||void 0===e?void 0:e.networkSwitchModal;o&&await o.addNetwork({chainConfig:t,appOrigin:window.location.hostname}),await(null===(n=this.wcProvider)||void 0===n?void 0:n.addChain(t)),this.addChainConfig(t)}async switchChain(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkSwitchChainRequirements(t,e),await this._switchChain({chainId:t.chainId},this.chainConfig),this.setAdapterSettings({chainConfig:this.getChainConfig(t.chainId)})}async _switchChain(t,e){var n,i;const o=null===(n=this.adapterOptions.adapterSettings)||void 0===n?void 0:n.networkSwitchModal;o&&await o.switchNetwork({currentChainConfig:e,newChainConfig:t,appOrigin:window.location.hostname}),await(null===(i=this.wcProvider)||void 0===i?void 0:i.switchChain({chainId:e.chainId,lookup:!1,addChain:!1}))}async createNewSession(){var t,e;let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{forceNewSession:!1};if(!this.connector)throw a.Ty.notReady("Wallet adapter is not ready yet");if(n.forceNewSession&&this.connector.pending&&await this.connector.killSession(),null===(t=this.adapterOptions)||void 0===t||null===(e=t.adapterSettings)||void 0===e||!e.qrcodeModal)return new Promise(((t,e)=>{var n;this.connector?(a.cM.debug("creating new session for web3auth wallet connect"),this.connector.on("display_uri",(async(n,i)=>{var o;if(n)return this.emit(a.n2.ERRORED,a.RM.connectionError("Failed to display wallet connect qr code")),e(n);const s=i.params[0];return this.updateAdapterData({uri:s,extensionAdapters:c}),null===(o=this.connector)||void 0===o||o.off("display_uri"),t()})),this.connector.createSession({chainId:parseInt((null===(n=this.chainConfig)||void 0===n?void 0:n.chainId)||"0x1",16)}).catch((t=>(a.cM.error("error while creating new wallet connect session",t),this.emit(a.n2.ERRORED,t),e(t))))):e(a.Ty.notReady("Wallet adapter is not ready yet"))}));var i;await this.connector.createSession({chainId:parseInt((null===(i=this.chainConfig)||void 0===i?void 0:i.chainId)||"0x1",16)})}async onConnectHandler(t){if(!this.connector||!this.wcProvider)throw a.Ty.notReady("Wallet adapter is not ready yet");if(!this.chainConfig)throw a.Ty.invalidParams("Chain config is not set");const{chainId:e}=t;a.cM.debug("connected chainId in hex");let n=!1;if("string"==typeof e?n=e!==this.chainConfig.chainId:"number"==typeof e&&(n=e!==parseInt(this.chainConfig.chainId,16)),n){var i,o,s;const t=(0,a.h2)(a.EN.EIP155,e)||{chainId:"number"==typeof e?`0x${e.toString(16)}`:e,displayName:"Unknown Network"},n=null===(i=this.adapterOptions.adapterSettings)||void 0===i?void 0:i.qrcodeModal;if(!n||n&&(null===(o=this.adapterOptions)||void 0===o||null===(s=o.adapterSettings)||void 0===s||!s.skipNetworkSwitching))try{await this.addChain(this.chainConfig,!0),await this._switchChain(t,this.chainConfig),this.connector=this.getWalletConnectInstance()}catch(n){return a.cM.error("error while chain switching",n),await this.createNewSession({forceNewSession:!0}),this.emit(a.n2.ERRORED,a.Ty.fromCode(5e3,`Not connected to correct network. Expected: ${this.chainConfig.displayName}, Current: ${(null==t?void 0:t.displayName)||e}, Please switch to correct network from wallet`)),this.status=a.MP.READY,void(this.rehydrated=!0)}}await this.wcProvider.setupProvider(this.connector),this.subscribeEvents(this.connector),this.status=a.MP.CONNECTED,this.emit(a.n2.CONNECTED,{adapter:a.rW.WALLET_CONNECT_V1,reconnected:this.rehydrated})}subscribeEvents(t){t.on("session_update",(async t=>{t&&this.emit(a.n2.ERRORED,t)})),t.on("disconnect",(async(t,e)=>{t&&this.emit(a.n2.ERRORED,t),a.cM.debug("disconnect event emitted by web3auth"),await super.disconnect(),this.status=a.n2.READY}))}getWalletConnectInstance(){const t=this.adapterOptions.adapterSettings||{};return t.bridge=t.bridge||"https://bridge.walletconnect.org",new o.default(t)}}},50314:()=>{},61720:()=>{},36576:()=>{},60986:()=>{},57017:()=>{},66396:()=>{}}]);